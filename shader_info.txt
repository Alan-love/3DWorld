Shaders:

Completed:
2. Leaf Transparency: VS
9. Snowflakes: GS using billboards
11. Per-Pixel Lighting: FS

Not Implementable/Too Difficult or Inefficient
1. Leaf Wind: GS - requires state
3. Grass Effects/Regen (crush, burn, cut, update z): GS - requires state
4. Cobj Lighting: VS - too much data sent to GPU per frame
5. Ship Rendering: VS/FS or Geometry Shader - too many shader loads per frame
6. Water Reflections: VS/FS - too inefficient per fragment, too complex per vertex
8. Mesh Underwater Caustics: FS - requires global solution, dependent on other effects

Todo:
7. Mesh Texturing: FS
* Apply a height/slope/water dependent texture to the mesh based on blending source textures
+ Significant memory reduction due to generation of texture on the fly vs. precalc/storage
+ Performance improvement in scrolling and mesh tiles
- May be too slow, even with partial precomputation
- Texture lookups may exceed fragment shader maximum (5 vs. 4?)
- Where do the constants and water depth parameters come from?

10. Smoke/Clouds and/or Fires: VS/FS, or GS using billboards
* Render smoke and cloud particles and/or fires faster or with better
quality/blending/lighting
+ Lots of possibilities here, plenty of research done on this topic
- Not sure what to do yet, or if the improvements would be significant

12. Infinite Terrain Tiles - Underwater Attenuation: VS
* Apply per-light, camera dependent color attenuation for underwater mesh
* Implement fog
+ Tiled mesh UW light atten will look better and agree with regular mesh lighting
+ UW lighting no longer built into texture, so more efficient to enable/disable water

13. Grass Moving in Wind: GS
* Grass blades move in the wind as a function of time and location using a noise texture (clouds?)
+ Improved realism of scene
- Don't want to move crushed or burned grass blades

14. Full Scene Smoke Effects: VS (or FS?)
* Integrate the smoke path from the vertex to the camera (possibly progressive)
+ Hopefully more efficient than current CPU algorithm
+ More accurate/better effect if it can go in the FS
+ More responsive/less lag
+ Can include colored smoke (no caching)
- May be too slow
- Requires loading the smoke as a 3D texture every frame (non-sparse?), so may require too much bandwidth

15. Planet Cloud Cover (Universe Mode): FS
* Add procedurally generated, unique, animated cloud cover to planets
+ Better quality and more realistic
- Need to figure out procedural noise (generation on GPU or texture)
