// for TT mode
uniform float smap_atten_cutoff = 10.0;
uniform float smap_atten_slope  = 0.5;

// for indir lighting
uniform sampler3D smoke_and_indir_tex;
uniform vec3 const_indir_color = vec3(0.0);

void add_indir_lighting(inout vec3 lit_color, in vec3 vpos) {
	vec3 indir_color = const_indir_color; // add constant indir

	if (indir_lighting) {
		vec3 spos    = clamp((vpos - scene_llc)/scene_scale, 0.0, 1.0); // should be in [0.0, 1.0] range
		indir_color += texture(smoke_and_indir_tex, spos.zxy).rgb; // add indir light color from texture
	}
	lit_color += gl_Color.rgb * indir_color;
}

vec3 get_tree_leaf_lighting(in vec4 epos, in vec3 normal, in vec3 vpos, in vec3 ws_normal) {
	vec3 color = vec3(0.0);
	add_indir_lighting(color, vpos);
	float ambient_scale = (indir_lighting ? 0.0 : 1.0);
	float smap_scale = 1.0;
#ifdef USE_SMAP_SCALE
	smap_scale = clamp(smap_atten_slope*(smap_atten_cutoff - length(epos.xyz)), 0.0, 1.0);
#endif
	if (enable_light0)  {color += add_leaf_light_comp(normal, epos, 0, ambient_scale, ((use_shadow_map && smap_scale > 0.0) ? mix(1.0, get_shadow_map_weight_light0(epos, normal), smap_scale) : 1.0)).rgb;}
	if (enable_light1)  {color += add_leaf_light_comp(normal, epos, 1, ambient_scale, ((use_shadow_map && smap_scale > 0.0) ? mix(1.0, get_shadow_map_weight_light1(epos, normal), smap_scale) : 1.0)).rgb;}
	if (enable_light2)  {color += add_pt_light_comp  (normalize(normal), epos, 2).rgb;} // lightning
	if (enable_dlights) {add_dlights(color, vpos, ws_normal, vec3(1.0));}
	return color;
}
