uniform float ambient_scale = 1.0;
uniform float wet_effect    = 0.0;
uniform vec4 specular_color = vec4(0,0,0,1); // enocded as {color.rgb, shininess}
float get_shininess() {return specular_color.a;}


struct fg_light_t {
	vec4 position;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 atten; // {constant, linear, quadratic}
};

const int MAX_LIGHTS = 8;
uniform fg_light_t fg_LightSource[MAX_LIGHTS];


float get_spec_intensity(in vec3 normal, in vec3 light_dir, in vec3 eye_dir) {
#if 0 // Phong
	float dp  = dot(eye_dir, reflect(-light_dir, normal));
#else // Blinn-Phong
	vec3 half_vect = normalize(light_dir + eye_dir); // Eye + L = -eye_space_pos + L
	float dp  = dot(normal, half_vect);
#endif
	//float n   = get_shininess()*mix(1.0, 2.5, wet_effect);
	float n   = mix(get_shininess(), 80.0, wet_effect);
	float mag = pow(clamp(dp, 0.01, 1.0), n);
	mag      *= 0.0166*(n + 8.0); // normalize for exponent of 60; normalization should be (n+8)/(8*pi);
	return mag;
}

vec3 get_wet_specular_color(in float wet_scale) {
	return mix(specular_color.rgb, min(vec3(1.0), specular_color.rgb+vec3(0.7)), wet_scale*wet_effect);
}
vec3 get_light_specular(in vec3 normal, in vec3 light_dir, in vec3 eye_pos, in vec3 spec_light_color) {
#ifdef USE_SPEC_MAP
	spec_light_color *= get_spec_color();
#endif
	return spec_light_color * get_wet_specular_color(1.0) * get_spec_intensity(normal, light_dir, normalize(-eye_pos));
}

vec3 apply_bump_map(inout vec3 light_dir, inout vec3 eye_pos); // declare this function so we can define it later

void maybe_apply_bump_map_self_shadowed(inout vec3 normal, inout vec3 light_dir, inout vec3 eye_pos, in float normal_scale) {
#ifdef USE_BUMP_MAP
	float atten = length(normal); // multiply by length of eye norm to account for shadow map attenuation
	atten *= clamp(5.0*dot(normal/atten, light_dir), 0.0, 1.0); // fix self-shadowing
	normal = normal_scale*atten*apply_bump_map(light_dir, eye_pos);
#endif
}

vec4 get_ads_lighting(in vec3 normal, in vec3 light_dir, in vec4 epos, in float ds_scale, in float a_scale, in vec4 ad_color, in fg_light_t light) {
	vec3 diffuse = (ad_color * light.diffuse).rgb*mix(1.0, 0.3, wet_effect);
	vec3 ambient = (ad_color * light.ambient).rgb;
#ifdef NO_SPECULAR
	vec3 specular = vec3(0.0);
#else
	vec3 specular = get_light_specular(normal, light_dir, epos.xyz, light.specular.rgb);
#endif
	return vec4((ambient_scale*a_scale*ambient + ds_scale*(max(dot(normal, light_dir), 0.0)*diffuse + specular)), ad_color.a);
}

vec4 add_light_comp_pos_scaled_light(in vec3 normal, in vec4 epos, in float ds_scale, in float a_scale, in vec4 ad_color, in fg_light_t light, in float bump_map_normal_scale) {
	// normalize the light's direction in eye space; for directional light, position field is actually direction
	vec3 light_dir = normalize(light.position.xyz - epos.xyz);
	maybe_apply_bump_map_self_shadowed(normal, light_dir, epos.xyz, bump_map_normal_scale);
	return get_ads_lighting(normal, light_dir, epos, ds_scale, a_scale, ad_color, light);
}

// general case, plus hard-coded functions for light0 and light1 to help the compiler optimize

// Note: eye space point light computation with no attenuation, or use vec3(0.0) for directional
vec4 add_light_comp_pos_scaled(in vec3 normal, in vec4 epos, in int i, in float ds_scale, in float a_scale, in vec4 ad_color) {
	return add_light_comp_pos_scaled_light(normal, epos, ds_scale, a_scale, ad_color, fg_LightSource[i], 1.0);
}
vec4 add_light_comp_pos_scaled0(in vec3 normal, in vec4 epos, in float ds_scale, in float a_scale, in vec4 ad_color) {
	return add_light_comp_pos_scaled_light(normal, epos, ds_scale, a_scale, ad_color, fg_LightSource[0], 1.0);
}
vec4 add_light_comp_pos_scaled1(in vec3 normal, in vec4 epos, in float ds_scale, in float a_scale, in vec4 ad_color) {
	return add_light_comp_pos_scaled_light(normal, epos, ds_scale, a_scale, ad_color, fg_LightSource[1], 1.0);
}

vec4 add_light_comp_pos (in vec3 normal, in vec4 epos, in int i) {return add_light_comp_pos_scaled (normal, epos, i, 1.0, 1.0, gl_Color);}
vec4 add_light_comp_pos0(in vec3 normal, in vec4 epos)           {return add_light_comp_pos_scaled0(normal, epos,    1.0, 1.0, gl_Color);}
vec4 add_light_comp_pos1(in vec3 normal, in vec4 epos)           {return add_light_comp_pos_scaled1(normal, epos,    1.0, 1.0, gl_Color);}

vec4 add_light_comp (in vec3 normal, in int i) {return add_light_comp_pos (normal, vec4(0.0), i);}
vec4 add_light_comp0(in vec3 normal)           {return add_light_comp_pos0(normal, vec4(0.0)   );}
vec4 add_light_comp1(in vec3 normal)           {return add_light_comp_pos1(normal, vec4(0.0)   );}


float calc_light_atten(in vec4 epos, in int i) {
	float dist = distance(fg_LightSource[i].position, epos);
	return 1.0 / dot(fg_LightSource[i].atten, vec3(1.0, dist, dist*dist));
}

float calc_light_atten0(in vec4 epos) {
	float dist = distance(fg_LightSource[0].position, epos);
	return 1.0 / dot(fg_LightSource[0].atten, vec3(1.0, dist, dist*dist));
}

vec4 add_pt_light_comp(in vec3 normal, in vec4 epos, in int i) {
	return add_light_comp_pos(normal, epos, i) * calc_light_atten(epos, i);
}

float get_luminance(in vec3 c) {return 0.333*(c.r + c.g + c.b);}

