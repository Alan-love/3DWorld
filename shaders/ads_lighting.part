// Note: point light computation with no attenuation, or use vec3(0,0,0) for directional
vec4 add_light_comp_pos(in vec3 normal, in vec3 pos, in int i) {

	// normalize the light's direction in eye space; for directional light, position field is actually direction
	vec3 lightDir = normalize(gl_LightSource[i].position.xyz - pos);
	
	// compute diffuse term
	vec4 diffuse = max(dot(normal, lightDir), 0.0) * gl_FrontLightProduct[i].diffuse;
	
	// compute the specular term
	float NdotHV  = max(dot(normal, normalize(gl_LightSource[i].halfVector.xyz)), 0.0);
	vec4 specular = gl_FrontLightProduct[i].specular * pow(NdotHV, gl_FrontMaterial.shininess);
	return (gl_FrontLightProduct[i].ambient + specular + diffuse);
}

vec4 add_light_comp(in vec3 normal, in int i) {
	return add_light_comp_pos(normal, vec3(0,0,0), i);
}

