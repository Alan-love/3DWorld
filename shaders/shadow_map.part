uniform float z_bias = 0.0;
uniform float norm_bias_scale = 10.0;
uniform float sm_scale0, sm_scale1;
uniform int sm_tu_id0, sm_tu_id1;
uniform sampler2DShadow sm_tex0, sm_tex1;

float get_shadow_map_weight(in vec4 pos, in vec3 normal, in float sm_scale, in int sm_tu_id, in sampler2DShadow sm_tex) {
#ifndef NO_SMAP_NORMAL_OFFSET
	pos.xyz += norm_bias_scale*z_bias*normal;
	//pos.xyz += norm_bias_scale*z_bias*normalize(gl_ModelViewMatrixInverse[3].xyz - pos.xyz); // world space view vector
#endif
	vec4 shadow_coord = gl_TextureMatrix[sm_tu_id] * pos;
	return sm_scale*shadow2DProj(sm_tex, shadow_coord + vec4(0, 0, -z_bias*shadow_coord.w, 0)).r;
}

float get_shadow_map_weight_light0(in vec4 pos, in vec3 normal) {
	return get_shadow_map_weight(pos, normal, sm_scale0, sm_tu_id0, sm_tex0);
}
float get_shadow_map_weight_light1(in vec4 pos, in vec3 normal) {
	return get_shadow_map_weight(pos, normal, sm_scale1, sm_tu_id1, sm_tex1);
}

vec4 add_light_comp_pos_smap_light0(in vec3 normal, in vec4 epos) {
	if (use_shadow_map) {normal *= get_shadow_map_weight_light0(epos, normal);}
	return add_light_comp_pos(normal, epos, 0);
}
vec4 add_light_comp_pos_smap_light1(in vec3 normal, in vec4 epos) {
	if (use_shadow_map) {normal *= get_shadow_map_weight_light1(epos, normal);}
	return add_light_comp_pos(normal, epos, 1);
}
