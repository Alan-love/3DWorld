// Note: point light computation with no attenuation, or use vec3(0,0,0) for directional
vec4 add_light_comp_pos(in vec3 normal, in vec3 pos, in int i) {
	// normalize the light's direction in eye space; for directional light, position field is actually direction
	vec3 lightDir = normalize(gl_LightSource[i].position.xyz - pos);
		
	// compute the cos of the angle between the normal and lights direction as a dot product, constant for every vertex.
	float NdotL = dot(normal, lightDir);
	
	// compute the ambient and diffuse lighting
	vec4 diffuse = gl_Color * gl_LightSource[i].diffuse;
	vec4 ambient = gl_Color * gl_LightSource[i].ambient;
	return (ambient + max(dot(normal, lightDir), 0.0)*diffuse);
}

vec4 add_light_comp(in vec3 normal, in int i) {
	return add_light_comp_pos(normal, vec3(0,0,0), i);
}

