float pt_line_dist(in vec3 P, in vec3 L1, in vec3 L2) {
	return length(cross((L2 - L1), (L1 - P)))/distance(L2, L1);
}

// analytical soft sphere shadow with spherical light source
float calc_sphere_shadow_atten(in vec3 pos, in vec3 lpos, in float lradius, in vec3 spos, in float sradius) {
	float atten = 1.0;
	float ldist = length(lpos - pos);

	if (ldist > length(lpos - spos)) { // behind the shadowing object
		const float PI = 3.14159;
		float d = pt_line_dist(spos, lpos, pos);
		float r = sradius;
		float R = lradius*length(spos - pos)/ldist;

		if (d < abs(R - r)) { // fully overlapped
			atten *= 1.0 - PI*min(r,R)*min(r,R)/(PI*R*R);
		}
		else if (d < (r + R)) { // partially overlapped
			float shadowed_area = r*r*acos((d*d+r*r-R*R)/(2.0*d*r)) + R*R*acos((d*d+R*R-r*r)/(2.0*d*R)) - 0.5*sqrt((-d+r+R)*(d+r-R)*(d-r+R)*(d+r+R));
			atten *= 1.0 - clamp(shadowed_area/(PI*R*R), 0.0, 1.0); // shadowed_area/total_area
		}
	}
	return atten;
}

