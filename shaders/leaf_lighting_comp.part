vec4 add_leaf_light_comp(in bool shadowed, in vec3 normal, in vec4 eye_space_pos, in int i, in float ambient_scale)
{
	// normalize the light's direction in eye space, directional light: position field is actually direction
	vec3 lightDir = normalize(fg_LightSource[i].position.xyz);
	
	// compute the ambient and diffuse terms
	vec3 diffuse = (gl_Color * fg_LightSource[i].diffuse).rgb * (shadowed ? 0.0 : 1.0);
	vec3 ambient = (gl_Color * fg_LightSource[i].ambient).rgb * ambient_scale;
	
	// calculate specular lighting and normal effects
	vec3 dir_to_camera = normalize(vec3(0.0,0.0,0.0) - eye_space_pos.xyz);
	vec3 dir_to_light  = normalize(fg_LightSource[i].position.xyz - eye_space_pos.xyz);
	float dp1 = dot(normal, dir_to_camera);
	float dp2 = dot(normal, dir_to_light);
	
	if (!shadowed && (dp1 < 0.0) != (dp2 < 0.0)) { // looking at unlit side
		normal *= -0.5; // reverse and halve
		float dp3 = dot(dir_to_camera, dir_to_light);

		if (i == 0 && dp3 < -0.95) { // leaf between light source and eye
			float val = -20.0*(dp3 + 0.95);
			normal = normal*(1.0 - val) + dir_to_light*((dp2 < 0.0) ? val : -val); // max light
		}
	}
	
	// compute the specular and diffuse terms if not shadowed
	vec3 specular = (shadowed ? 0.0 : 1.0) * get_light_specular(normal, dir_to_light, eye_space_pos.xyz, fg_LightSource[i].specular.rgb);
	return vec4((ambient + specular + max(dot(normal, lightDir), 0.0)*diffuse), gl_Color.a);
}
