uniform float water_val = 0.0;
uniform float lava_val  = 0.0;
uniform float terrain_scale, noise_offset;

// perform manual floating-point interpolation rather than 8-bit integer interpolation; higher quality but slower
float texture_sample_3d_high(sampler3D sampler, vec3 uv) {
	vec3 res = textureSize(cloud_noise_tex, 0);
	vec3 st  = uv*res - 0.5;
	vec3 iuv = floor(st);
	vec3 fuv = fract(st);
	float a = texture(sampler, (iuv+vec3(0.5,0.5,0.5))/res).r;
	float b = texture(sampler, (iuv+vec3(1.5,0.5,0.5))/res).r;
	float c = texture(sampler, (iuv+vec3(0.5,1.5,0.5))/res).r;
	float d = texture(sampler, (iuv+vec3(1.5,1.5,0.5))/res).r;
	float e = texture(sampler, (iuv+vec3(0.5,0.5,1.5))/res).r;
	float f = texture(sampler, (iuv+vec3(1.5,0.5,1.5))/res).r;
	float g = texture(sampler, (iuv+vec3(0.5,1.5,1.5))/res).r;
	float h = texture(sampler, (iuv+vec3(1.5,1.5,1.5))/res).r;
	return mix(mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y), mix(mix(e, f, fuv.x), mix(g, h, fuv.x), fuv.y), fuv.z);
}

float eval_noise_from_texture_high(in vec3 npos, const in int num_octaves, const in float gain, const in float lacunarity) {
	float val  = 0.0;
	float mag  = 1.0;
	float freq = 0.5; // lower freq for ridged noise

	for (int i = 0; i < num_octaves; ++i) { // similar to gen_cloud_alpha_time()
		float v = texture_sample_3d_high(cloud_noise_tex, freq*npos);
		v = 2.0*v - 1.0; // map [0,1] range to [-1,1]
		v = max(0.0, (0.75 - abs(v))); // ridged noise
		val  += v*mag;
		freq *= lacunarity;
		mag  *= gain;
	}
	return val;
}

float eval_noise_from_texture(in vec3 npos, const in int num_octaves, const in float gain, const in float lacunarity) {
	float val  = 0.0;
	float mag  = 1.0;
	float freq = 0.5; // lower freq for ridged noise

	for (int i = 0; i < num_octaves; ++i) { // similar to gen_cloud_alpha_time()
		float v = texture(cloud_noise_tex, freq*npos).r;
		v = 2.0*v - 1.0; // map [0,1] range to [-1,1]
		v = max(0.0, (0.75 - abs(v))); // ridged noise
		val  += v*mag;
		freq *= lacunarity;
		mag  *= gain;
	}
	return val;
}

void terrain_warp(inout vec3 npos, const in int num_octaves) {
	float val = eval_noise_from_texture_high(0.57*npos, num_octaves, 0.5, 2.0);
	npos += 0.4*terrain_scale*vec3(val);
	//npos = (0.01*val + 0.5)*npos;
}

float eval_terrain_noise_base(in vec3 npos, const in int num_octaves, const in float gain, const in float lacunarity) {
#ifdef DOMAIN_WARP
	terrain_warp(npos, num_octaves); // looks better, but slower and looks blocky when close to the surface
#endif
	return eval_noise_from_texture(npos, num_octaves, gain, lacunarity);
}

float eval_terrain_noise(in vec3 npos, const in int num_octaves) {
	return 0.7*eval_terrain_noise_base(npos, num_octaves, 0.7, 2.0);
}
float eval_terrain_noise_normal(in vec3 npos, const in int num_octaves) {
	return eval_terrain_noise_base(npos, num_octaves, 0.5, 1.92);
}

float get_delta_h(in vec3 pos) {
	float hval   = 0.7*eval_terrain_noise_base(pos, 8, 0.66, 2.0);
	float cutoff = max(water_val, lava_val);
	float height = pow((1.0 - cutoff), 0.1)*max(0.0, 1.8*(hval-0.7)); // can go outside the [0,1] range
	float omcinv = 1.0/max(0.01, (1.0 - cutoff)); // avoid div-by-zero
	return omcinv*(max(cutoff, height) - cutoff) - 0.5;
}

vec3 calc_deriv_normal(in vec3 pos, in vec3 normal, in float hval) {
	// use derivative at this vertex to get a better quality (but slower) vertex normal
	float delta = 0.001;
	float hdx   = hval - get_delta_h(pos + vec3(delta, 0.0, 0.0));
	float hdy   = hval - get_delta_h(pos + vec3(0.0, delta, 0.0));
	float hdz   = hval - get_delta_h(pos + vec3(0.0, 0.0, delta));
	return normalize(normal + 0.5*(fg_NormalMatrix * vec3(hdx, hdy, hdz)));
}

vec3 displace_vertex_and_get_normal(in vec3 pos, inout vec3 vertex) {
	// since we know the incoming vertices represent a perfect sphere around (0,0,0),
	// we can calculate the normal from the vertex, allowing us to skip sending the normals to the GPU
	vec3 npos  = terrain_scale*pos + vec3(noise_offset);
	float hval = get_delta_h(npos);
	vertex    *= 1.0 + 0.01*hval; // offset the vertex
	vec3 norm  = normalize(fg_NormalMatrix * vertex);
	norm       = calc_deriv_normal(npos, norm, hval); // optional (slow but improves quality)
	return norm;
}
